service: frc-challenge-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 30
  
  # Environment variables
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    CHALLENGES_TABLE: ${self:service}-challenges-${self:provider.stage}
    USER_PROGRESS_TABLE: ${self:service}-user-progress-${self:provider.stage}
    CHALLENGE_SESSIONS_TABLE: ${self:service}-challenge-sessions-${self:provider.stage}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    NODE_ENV: ${env:NODE_ENV, 'development'}
    
  # IAM permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHALLENGES_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_PROGRESS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHALLENGE_SESSIONS_TABLE}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHALLENGES_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_PROGRESS_TABLE}/index/*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHALLENGE_SESSIONS_TABLE}/index/*"
        - Effect: Allow
          Action:
            - cognito-idp:GetUser
            - cognito-idp:AdminGetUser
          Resource:
            - "arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:provider.environment.COGNITO_USER_POOL_ID}"

# Lambda functions
functions:
  # Challenge Management
  getChallenges:
    handler: dist/handlers/challenges/getChallenges.handler
    events:
      - http:
          path: /challenges
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  getChallengesOptions:
    handler: dist/handlers/cors/options.handler
    events:
      - http:
          path: /challenges
          method: options

  getChallenge:
    handler: dist/handlers/challenges/getChallenge.handler
    events:
      - http:
          path: /challenges/{id}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  getChallengeOptions:
    handler: dist/handlers/cors/options.handler
    events:
      - http:
          path: /challenges/{id}
          method: options

  # User Progress Management
  getUserProgress:
    handler: dist/handlers/progress/getUserProgress.handler
    events:
      - http:
          path: /user/progress
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  getUserProgressOptions:
    handler: dist/handlers/cors/options.handler
    events:
      - http:
          path: /user/progress
          method: options

  updateChallengeProgress:
    handler: dist/handlers/progress/updateChallengeProgress.handler
    events:
      - http:
          path: /challenges/{id}/progress
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  updateChallengeProgressOptions:
    handler: dist/handlers/cors/options.handler
    events:
      - http:
          path: /challenges/{id}/progress
          method: options

  # Challenge Sessions
  createChallengeSession:
    handler: dist/handlers/sessions/createChallengeSession.handler
    events:
      - http:
          path: /challenges/{id}/sessions
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  createChallengeSessionOptions:
    handler: dist/handlers/cors/options.handler
    events:
      - http:
          path: /challenges/{id}/sessions
          method: options

  saveChallengeCode:
    handler: dist/handlers/sessions/saveChallengeCode.handler
    events:
      - http:
          path: /sessions/{sessionId}/code
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

  saveChallengeCodeOptions:
    handler: dist/handlers/cors/options.handler
    events:
      - http:
          path: /sessions/{sessionId}/code
          method: options

# CloudFormation resources
resources:
  Resources:
    # API Gateway Authorizer
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPoolAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        ProviderARNs:
          - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${self:provider.environment.COGNITO_USER_POOL_ID}"

    # DynamoDB Tables
    ChallengesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CHALLENGES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: category
            AttributeType: S
          - AttributeName: difficulty
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CategoryIndex
            KeySchema:
              - AttributeName: category
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: DifficultyIndex
            KeySchema:
              - AttributeName: difficulty
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    UserProgressTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_PROGRESS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: challengeId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: challengeId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ChallengeIndex
            KeySchema:
              - AttributeName: challengeId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ChallengeSessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CHALLENGE_SESSIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: challengeId
            AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ChallengeIndex
            KeySchema:
              - AttributeName: challengeId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
    packager: npm
